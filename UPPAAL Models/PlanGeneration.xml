<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int N = 5; // Number of satellites

clock time;

typedef int[0, N-1] UID;

chan transmit[N];
chan execute[N];
chan complete;

meta UID sender;
meta bool failure;

UID start; // The satellite that initiates

// ------  PlanGeneration  ------

typedef struct { int x; int y; int z; } pos;


int[0, 2*N] comms;

const int circumference = 100;
int startPositions[N];
int targetPositions[N];

int chosenPos[N];
</declaration>
	<template>
		<name x="9" y="9">RingNodeSync</name>
		<parameter>const UID ID</parameter>
		<declaration>clock t;

int cost; // the cost to move to a target position

int possiblePos[N]; // the target positions that this node can take, and their cost
int nodesBestCost[N]; // the best target positions that other nodes can take.


UID nextHop() {
  return (ID + 1) % N;
}


int minInt(int n1, int n2)
{
  if (n1 &lt; n2)
  {
    return n1;
  }
  {
    return n2;
  }  
}

int maxInt(int n1, int n2)
{
  if (n1 &gt; n2)
  {
    return n1;
  }
  {
    return n2;
  }
}


int Distance(int p1, int p2)
{
  int minP = minInt(p1, p2);
  int maxP = maxInt(p1, p2);

  int distance1 = maxP - minP;
  int distance2 = (circumference - maxP) + minP;

  if ((distance1 &lt; distance2) &amp;&amp; (distance1 &gt;= 0))
  {
    return distance1;
  }
  else
  {
    return distance2;
  }
}


// Check if node with id has already chosen a target postion
bool isInPlan(int id)
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (id == chosenPos[i])
    {
      return true;
    }
  }
  return false;
}


bool IsPlanFull()
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      return false;
    }
  }
  return true;
}


// Calculate this node's cost to all target positions
void CalculatePositions()
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    nodesBestCost[i] = -1; //initalize bestNodes

    if (chosenPos[i] == -1)
    {
      possiblePos[i] = Distance(startPositions[ID], targetPositions[i]);
    }
    else
    {
      possiblePos[i] = -1;
    }
  }
}


// Finds a node's best position, overwrites if its better than other nodes.
void BestPosition(int id)
{
  int bestCost = -1;
  int bestPos;

  int i;
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      int tempCost = Distance(startPositions[id], targetPositions[i]);

      if (tempCost &lt; bestCost || bestCost == -1)
      {
        bestCost = tempCost;
        bestPos = i;
      }
    }
  }

  if (bestCost &lt; nodesBestCost[bestPos] || nodesBestCost[bestPos] == -1)
  {
    nodesBestCost[bestPos] = bestCost;
  } 
}


void ProcessPlan()
{
  int myChosenPos = -1;
  int myCost = -1;

  int i;  

  // Calculates all remaining nodes best postition
  for (i=0; i&lt;N; i++)
  {
    if (!isInPlan(i) &amp;&amp; i != ID)
    {
      BestPosition(i);
    }
  }

  // Loop over all possible positions. Take the best target position, that isn't other nodes best.
  for (i=0; i&lt;N; i++)
  {
    if (possiblePos[i] != -1 &amp;&amp; nodesBestCost[i] == -1)
    {
      
      if (possiblePos[i] &lt; myCost || myCost == -1)
      {
        myChosenPos = i;
        myCost = possiblePos[i];
      }
    }
  }

  chosenPos[myChosenPos] = ID;
  cost = myCost;
}</declaration>
		<location id="id0" x="442" y="0">
			<name x="459" y="-11">CheckPlan</name>
			<committed/>
		</location>
		<location id="id1" x="442" y="102">
			<name x="397" y="113">Transmit</name>
			<label kind="invariant" x="414" y="129">t &lt;= 1</label>
		</location>
		<location id="id2" x="442" y="-102">
			<name x="370" y="-151">StartExecute</name>
			<label kind="invariant" x="415" y="-134">t &lt;= 1</label>
		</location>
		<location id="id3" x="289" y="0">
			<name x="263" y="17">Process</name>
			<committed/>
		</location>
		<location id="id4" x="612" y="102">
			<name x="573" y="114">WaitExecute</name>
		</location>
		<location id="id5" x="0" y="0">
			<name x="-25" y="17">Receive</name>
		</location>
		<location id="id6" x="136" y="0">
			<name x="110" y="17">Calculate</name>
			<urgent/>
		</location>
		<location id="id7" x="68" y="-59">
			<name x="51" y="-93">Start</name>
			<urgent/>
		</location>
		<location id="id8" x="722" y="0">
			<name x="739" y="-8">Terminate</name>
		</location>
		<location id="id9" x="612" y="-102">
			<name x="595" y="-139">Wait</name>
		</location>
		<location id="id10" x="722" y="-102">
			<name x="710" y="-141">Complete</name>
			<committed/>
		</location>
		<location id="id11" x="722" y="102">
			<name x="710" y="112">SendExecute</name>
			<label kind="invariant" x="711" y="131">t &lt;= 1</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="guard" x="726" y="35">t &gt;= 1</label>
			<label kind="synchronisation" x="725" y="48">execute[nextHop()]!</label>
			<label kind="assignment" x="726" y="64">comms++</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="620" y="68">execute[ID]?</label>
			<label kind="assignment" x="646" y="85">t = 0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="727" y="-64">complete!</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="627" y="-125">execute[ID]?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id9"/>
			<label kind="guard" x="498" y="-152">t &gt;= 1</label>
			<label kind="synchronisation" x="463" y="-136">execute[nextHop()]!</label>
			<label kind="assignment" x="490" y="-122">comms++</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="365" y="42">!IsPlanFull()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="368" y="-68">IsPlanFull()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="assignment" x="306" y="-25">ProcessPlan(), t = 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="assignment" x="153" y="-25">CalculatePositions()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="93" y="-76">ID == start</label>
			<nail x="136" y="-59"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="guard" x="-25" y="-76">ID != start</label>
			<nail x="0" y="-59"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="503" y="51">t &gt;= 1</label>
			<label kind="synchronisation" x="467" y="68">transmit[nextHop()]!</label>
			<label kind="assignment" x="495" y="83">comms++</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="27" y="-23">transmit[ID]?</label>
		</transition>
	</template>
	<template>
		<name>RingNodeAsync</name>
		<parameter>const UID ID</parameter>
		<declaration>clock t;

int cost; // the cost to move to a target position

int possiblePos[N]; // the target positions that this node can take, and their cost
int nodesBestCost[N]; // the best target positions that other nodes can take.


UID nextHop() {
  return (ID + 1) % N;
}


int minInt(int n1, int n2)
{
  if (n1 &lt; n2)
  {
    return n1;
  }
  {
    return n2;
  }  
}

int maxInt(int n1, int n2)
{
  if (n1 &gt; n2)
  {
    return n1;
  }
  {
    return n2;
  }
}


int Distance(int p1, int p2)
{
  int minP = minInt(p1, p2);
  int maxP = maxInt(p1, p2);

  int distance1 = maxP - minP;
  int distance2 = (circumference - maxP) + minP;

  if ((distance1 &lt; distance2) &amp;&amp; (distance1 &gt;= 0))
  {
    return distance1;
  }
  else
  {
    return distance2;
  }
}


// Check if node with id has already chosen a target postion 
bool isInPlan(int id)
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (id == chosenPos[i])
    {
      return true;
    }
  }
  return false;
}


bool IsPlanFull()
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      return false;
    }
  }
  return true;
}


// Calculate this node's cost to all target positions
void CalculatePositions()
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    nodesBestCost[i] = -1; //initalize bestNodes

    if (chosenPos[i] == -1)
    {
      possiblePos[i] = Distance(startPositions[ID], targetPositions[i]);
    }
    else
    {
      possiblePos[i] = -1;
    }
  }
}


// Finds a node's best position, overwrites if its better than other nodes.
void BestPosition(int id)
{
  int bestCost = -1;
  int bestPos;

  int i;
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      int tempCost = Distance(startPositions[id], targetPositions[i]);

      if (tempCost &lt; bestCost || bestCost == -1)
      {
        bestCost = tempCost;
        bestPos = i;
      }
    }
  }

  if (bestCost &lt; nodesBestCost[bestPos] || nodesBestCost[bestPos] == -1)
  {
    nodesBestCost[bestPos] = bestCost;
  } 
}


void ProcessPlan()
{
  int myChosenPos = -1;
  int myCost = -1;

  int i;  

  // Calculates all remaining nodes best postition
  for (i=0; i&lt;N; i++)
  {
    if (!isInPlan(i) &amp;&amp; i != ID)
    {
      BestPosition(i);
    }
  }

  // Loop over all possible positions. Take the best target position, that isn't other nodes best.
  for (i=0; i&lt;N; i++)
  {
    if (possiblePos[i] != -1 &amp;&amp; nodesBestCost[i] == -1)
    {
      
      if (possiblePos[i] &lt; myCost || myCost == -1)
      {
        myChosenPos = i;
        myCost = possiblePos[i];
      }
    }
  }

  chosenPos[myChosenPos] = ID;
  cost = myCost;
}</declaration>
		<location id="id12" x="722" y="102">
			<name x="712" y="115">SendExecute</name>
			<label kind="invariant" x="713" y="131">t &lt;= 10</label>
		</location>
		<location id="id13" x="722" y="0">
			<name x="739" y="-8">Terminate</name>
		</location>
		<location id="id14" x="612" y="102">
			<name x="573" y="114">WaitExecute</name>
		</location>
		<location id="id15" x="722" y="-102">
			<name x="713" y="-139">Complete</name>
			<committed/>
		</location>
		<location id="id16" x="612" y="-102">
			<name x="595" y="-139">Wait</name>
		</location>
		<location id="id17" x="442" y="-102">
			<name x="372" y="-151">StartExecute</name>
			<label kind="invariant" x="408" y="-134">t &lt;= 10</label>
		</location>
		<location id="id18" x="442" y="0">
			<name x="459" y="-11">CheckPlan</name>
			<committed/>
		</location>
		<location id="id19" x="442" y="102">
			<name x="399" y="114">Transmit</name>
			<label kind="invariant" x="412" y="131">t &lt;= 10</label>
		</location>
		<location id="id20" x="289" y="0">
			<name x="263" y="17">Process</name>
			<committed/>
		</location>
		<location id="id21" x="0" y="0">
			<name x="-25" y="17">Receive</name>
		</location>
		<location id="id22" x="136" y="0">
			<name x="110" y="17">Calculate</name>
			<urgent/>
		</location>
		<location id="id23" x="68" y="-59">
			<name x="51" y="-93">Start</name>
			<urgent/>
		</location>
		<init ref="id23"/>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="726" y="35">t &gt;= 1</label>
			<label kind="synchronisation" x="725" y="48">execute[nextHop()]!</label>
			<label kind="assignment" x="726" y="64">comms++</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="620" y="68">execute[ID]?</label>
			<label kind="assignment" x="646" y="85">t = 0</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="726" y="-63">complete!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="627" y="-125">execute[ID]?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="503" y="-141">t &gt;= 1</label>
			<label kind="synchronisation" x="467" y="-125">execute[nextHop()]!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="365" y="42">!IsPlanFull()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="368" y="-68">IsPlanFull()</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="assignment" x="306" y="-25">ProcessPlan(), t = 0</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="assignment" x="153" y="-25">CalculatePositions()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="93" y="-76">ID == start</label>
			<nail x="136" y="-59"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id21"/>
			<label kind="guard" x="-25" y="-76">ID != start</label>
			<nail x="0" y="-59"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id14"/>
			<label kind="guard" x="503" y="51">t &gt;= 1</label>
			<label kind="synchronisation" x="467" y="68">transmit[nextHop()]!</label>
			<label kind="assignment" x="495" y="83">comms++</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="27" y="-23">transmit[ID]?</label>
		</transition>
	</template>
	<template>
		<name>PlanGeneration</name>
		<declaration>int setup;
const int distanceBetweenNodes = circumference / N;

typedef int[1, 3] OffsetPosition;

int nextPosition = 0;

// Returns position close to the middle of two start positions
int EvenOffset(OffsetPosition oP)
{
  
  int offset = distanceBetweenNodes / 2;

  if (oP == 1) // CounterClockwise
  {
    offset -= offset / 4;
  }
  else if(oP == 2) // Middle
  {
    // do nothing 
  }
  else if(oP == 3) // Clockwise
  {
        offset += offset / 4;
  }
  return offset;
}


// Verification - checks if all target positions are chosen
bool AllTargetsChosen()
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      return false;
    }
  }
  return true;
}


// Verification - checks if chosen target postions are chosen by distinct nodes
bool Destinct(){
  bool result = true;
  int i;
  for (i=0; i&lt;N; i++)
  {
    int count = 0;
    int j;
    for (j=0; j&lt;N; j++)
    {
      if (chosenPos[j] == i)
      { 
        count++;
      }
    }
    if (count &gt; 1)
    {
      result = false; 
    }
  }
  return result;
}

bool Verify() {
  return AllTargetsChosen() &amp;&amp; Destinct();
}</declaration>
		<location id="id24" x="-340" y="0">
			<name x="-373" y="12">StartNode</name>
			<committed/>
		</location>
		<location id="id25" x="-204" y="0">
			<name x="-219" y="12">Wait</name>
		</location>
		<location id="id26" x="-68" y="0">
			<name x="-51" y="-8">Complete</name>
			<committed/>
		</location>
		<location id="id27" x="68" y="68">
			<name x="85" y="59">Wrong</name>
		</location>
		<location id="id28" x="68" y="-68">
			<name x="85" y="-76">Correct</name>
		</location>
		<location id="id29" x="-476" y="0">
			<name x="-569" y="7">StartPositions</name>
			<committed/>
		</location>
		<location id="id30" x="-476" y="102">
			<name x="-461" y="92">TargetPositions</name>
			<committed/>
		</location>
		<location id="id31" x="-680" y="0">
			<name x="-758" y="-10">Increment</name>
			<committed/>
		</location>
		<init ref="id29"/>
		<transition>
			<source ref="id29"/>
			<target ref="id24"/>
			<label kind="guard" x="-442" y="-34">setup == N</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id29"/>
			<label kind="assignment" x="-707" y="-84">chosenPos[setup] = -1,
setup++,
nextPosition += distanceBetweenNodes</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="assignment" x="-756" y="127">targetPositions[setup] = nextPosition + EvenOffset(1)</label>
			<nail x="-680" y="102"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-467" y="34">setup &lt; N</label>
			<label kind="assignment" x="-467" y="51">startPositions[setup] = nextPosition</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-60" y="68">Verify() == false</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id28"/>
			<label kind="guard" x="-60" y="-93">Verify() == true</label>
			<nail x="-68" y="-68"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-170" y="-25">complete?</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="select" x="-314" y="-42">node : UID</label>
			<label kind="assignment" x="-314" y="-25">start = node</label>
		</transition>
	</template>
	<template>
		<name>PlanGenerationHole</name>
		<declaration>int setup;
const int distanceBetweenNodes = circumference / (N + 1);
const int distanceBetweenTargets = circumference / N;

int nextNodePosition = distanceBetweenNodes;
int nextTargetPosition = 0;

typedef int[1, 3] OffsetPosition;


// Places target postions in the middle, close, or futher away (from the original/middle position)
int ExtraOffset(OffsetPosition oP)
{
  
  int offset = distanceBetweenTargets;

  if (oP == 1) // Even - do nothing
  {
    offset = 0;
  }
  else if(oP == 2) // close - extra 1/4
  {
    offset = offset / 4;
  }
  else if(oP == 3) // far away extra 3/4
  {
    offset = 3 * (offset / 4) ;
  }
  return offset;
}


// Verification - checks if all target positions are chosen
bool AllTargetsChosen()
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      return false;
    }
  }
  return true;
}


// Verification - checks if chosen target postions are chosen by distinct nodes
bool Destinct(){
  bool result = true;
  int i;
  for (i=0; i&lt;N; i++)
  {
    int count = 0;
    int j;
    for (j=0; j&lt;N; j++)
    {
      if (chosenPos[j] == i)
      { 
        count++;
      }
    }
    if (count &gt; 1)
    {
      result = false; 
    }
  }
  return result;
}

bool Verify() {
  return AllTargetsChosen() &amp;&amp; Destinct();
}

</declaration>
		<location id="id32" x="-476" y="0">
			<name x="-561" y="8">StartPosition</name>
			<committed/>
		</location>
		<location id="id33" x="-340" y="0">
			<name x="-370" y="14">StartNode</name>
			<committed/>
		</location>
		<location id="id34" x="-680" y="0">
			<name x="-761" y="-10">Increment</name>
			<committed/>
		</location>
		<location id="id35" x="-476" y="102">
			<name x="-459" y="93">TargetPosition</name>
			<committed/>
		</location>
		<location id="id36" x="-204" y="0">
			<name x="-221" y="17">Wait</name>
		</location>
		<location id="id37" x="-68" y="0">
			<name x="-51" y="-8">Complete</name>
			<committed/>
		</location>
		<location id="id38" x="68" y="68">
			<name x="85" y="59">Wrong</name>
		</location>
		<location id="id39" x="68" y="-68">
			<name x="85" y="-76">Correct</name>
		</location>
		<init ref="id32"/>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="guard" x="-442" y="-25">setup == N</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id32"/>
			<label kind="assignment" x="-736" y="-97">chosenPos[setup] = -1,
setup++,
nextNodePosition += distanceBetweenNodes,
nextTargetPosition += distanceBetweenTargets</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="select" x="-671" y="119">offset : OffsetPosition</label>
			<label kind="assignment" x="-799" y="136">targetPositions[setup] = nextTargetPosition + ExtraOffset(offset)</label>
			<nail x="-680" y="102"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id35"/>
			<label kind="guard" x="-467" y="34">setup &lt; N</label>
			<label kind="assignment" x="-467" y="51">startPositions[setup] = nextNodePosition</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="guard" x="-60" y="68">Verify() == false</label>
			<nail x="-68" y="68"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id39"/>
			<label kind="guard" x="-60" y="-93">Verify() == true</label>
			<nail x="-68" y="-68"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-170" y="-25">complete?</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id36"/>
			<label kind="select" x="-314" y="-42">node : UID</label>
			<label kind="assignment" x="-314" y="-25">start = node</label>
		</transition>
	</template>
	<system>system RingNodeSync, PlanGeneration;</system>
	<queries>
		<query>
			<formula>***** SYNC QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) RingNodeSync(i).Terminate</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>***** ASYNC QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) RingNodeAsync(i).Terminate</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>***** GENEREL QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGeneration.Correct</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGenerationHole.Correct</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] time &lt;= (N * 2) - 1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGeneration.Complete &amp;&amp; time &lt;= (N * 2) - 1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGeneration.Complete &amp;&amp; time &lt;= (N * 2) - 2</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGenerationHole.Complete &amp;&amp; time &lt;= (N * 2) - 1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGenerationHole.Complete &amp;&amp; time &lt;= (N * 2) - 2</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] comms &lt;= (N * 2) - 1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGeneration.Complete &amp;&amp; comms &lt;= (N * 2) - 2</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGenerationHole.Complete &amp;&amp; comms &lt;= (N * 2) - 2</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>***** DEBUG QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i: UID) RingNodeSync(i).Wait imply start == RingNodeSync(i).ID</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i: UID) RingNodeAsync(i).Wait imply start == RingNodeAsync(i).ID</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) chosenPos[i] == i</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) chosenPos[i] != -1 &amp;&amp; RingNodeSync(i).Terminate</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i : UID) chosenPos[i] == -1 &amp;&amp; RingNodeSync(i).Terminate</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) chosenPos[i] != -1 &amp;&amp; RingNodeAsync(i).Terminate</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i : UID) chosenPos[i] == -1 &amp;&amp; RingNodeAsync(i).Terminate</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGeneration.Complete</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGeneration.Wrong</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] !PlanGeneration.Wrong</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; deadlock &amp;&amp; (!PlanGeneration.Correct &amp;&amp; !PlanGeneration.Wrong)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; deadlock &amp;&amp; (!PlanGenerationHole.Correct &amp;&amp; !PlanGenerationHole.Wrong)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
