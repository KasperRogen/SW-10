<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int N = 7; // Number of satellites

clock time;

typedef int[0, N-1] UID;

chan transmit[N];
chan acknowledge[N];
chan complete;

meta UID sender;
meta bool failure;

UID start; // The satellite that initiates

// ------  PlanGeneration  ------

typedef struct { int x; int y; int z; } pos;


int[0, 2*N] comms;

// ---- Positions -----
/*
const pos sp1 = {8,0,8};
const pos sp2 = {8,0,-8};
const pos sp3 = {-8,0,8};
const pos sp4 = {-8,0,-8};

const pos tp1 = {2,0,8};
const pos tp2 = {2,0,-8};
const pos tp3 = {-2,0,8};
const pos tp4 = {-2,0,-8};

const pos startPositions[N] = {sp1, sp2, sp3, sp4};
const pos targetPositions[N] = {tp1, tp2, tp3, tp4};

int chosenPos[N] = {-1,-1,-1,-1};
*/

/*
meta double PI = 3.14159265358979312;
meta double radius = 100.0;

meta double radianIncrease;
meta double radian = 0.0;
*/

int radius = 1000;
int startPositions[N];
int targetPositions[N];

int chosenPos[N];
</declaration>
	<template>
		<name x="9" y="9">RingNodeSync</name>
		<parameter>const UID ID</parameter>
		<declaration>clock t;

int cost; // the cost to move to a target position

int possiblePos[N];


UID nextHop() {
  return (ID + 1) % N;
}

// Distance between two points
/*
int Distance(pos p1, pos p2)
{
  double a = pow((p2.x - p1.x), 2);
  double b = pow((p2.y - p1.y), 2);
  double c = pow((p2.z - p1.z), 2);

  double dist = sqrt(a + b + c);
  int distInt = fint(dist);
  return  distInt;
}
*/

int minInt(int n1, int n2)
{
  if (n1 &lt; n2)
  {
    return n1;
  }
  {
    return n2;
  }  
}

int maxInt(int n1, int n2)
{
  if (n1 &gt; n2)
  {
    return n1;
  }
  {
    return n2;
  }
}

int Distance(int p1, int p2)
{
  int minP = minInt(p1, p2);
  int maxP = maxInt(p1, p2);

  int distance1 = maxP - minP;
  int distance2 = (radius - maxP) + minP;

  if ((distance1 &lt; distance2) &amp;&amp; (distance1 &gt;= 0))
  {
    return distance1;
  }
  else
  {
    return distance2;
  }
}


int minIndex()
{
  int minVal = 999;
  int index;
  
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (possiblePos[i] &lt; minVal  &amp;&amp; possiblePos[i] != -1)
    {
      index = i;
      minVal = possiblePos[i];
    }
  }
  return index;
}

// check if node with id has already chosen a position
bool isInPlan(int id)
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (id == chosenPos[i]) { return true; }
  }
  return false;
}

void CalculatePositions()
{
  int i;

  // Calculate cost to all target positions
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      possiblePos[i] = Distance(startPositions[ID], targetPositions[i]);
    }
    else
    {
      possiblePos[i] = -1;
    }
  }
}


int BestPosition(int id)
{
  int bestCost = 999;
  int bestPos;
  
  int i;
  for (i=0; i&lt;N; i++)
  {
    int tempCost = Distance(startPositions[id], targetPositions[i]);

    if (tempCost &lt; bestCost)
    {
      bestCost = tempCost;
      bestPos = i;
    }
  }

  return bestPos;
}


void ProcessPlan()
{
  int i;
  int nodesBestPos[N];
  
  for (i=0; i&lt;N; i++)
  {
    if (!isInPlan(i) &amp;&amp; i != ID)
    {
        int bestPosition = BestPosition(i);
    }
    else
    {
      nodesBestPos[i] = -1;
    }
  }

  // Loop over all possible positions (smallest first)
  // Check if other nodes has each position as their best
  // Choose the first available
  for (i=0; i&lt;N; i++)
  {
    if (possiblePos[i] != -1)
    {
      int index = minIndex();
      
      if (nodesBestPos[index] == -1)
      {
        chosenPos[index] = ID;
        cost = Distance(startPositions[i], targetPositions[index]);
      }
      else
      {
        possiblePos[index] = -1;
      }
    }
  }
}</declaration>
		<location id="id0" x="-34" y="0">
			<name x="-59" y="17">Receive</name>
		</location>
		<location id="id1" x="170" y="0">
			<name x="144" y="17">Process</name>
			<urgent/>
		</location>
		<location id="id2" x="544" y="0">
			<name x="518" y="17">Transmit</name>
			<label kind="invariant" x="527" y="34">t &lt;= 1</label>
		</location>
		<location id="id3" x="722" y="0">
			<name x="705" y="17">Done</name>
		</location>
		<location id="id4" x="68" y="-68">
			<name x="51" y="-102">Start</name>
			<urgent/>
		</location>
		<location id="id5" x="858" y="0">
			<committed/>
		</location>
		<location id="id6" x="357" y="0">
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="assignment" x="382" y="-25">ProcessPlan(), t = 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="assignment" x="204" y="-25">CalculatePositions()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="756" y="-93">complete!</label>
			<nail x="858" y="-68"/>
			<nail x="722" y="-68"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="747" y="-25">transmit[ID]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="93" y="-93">ID == start</label>
			<nail x="170" y="-68"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-17" y="-93">ID != start</label>
			<nail x="-34" y="-68"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="603" y="-59">t &gt;= 1</label>
			<label kind="synchronisation" x="561" y="-42">transmit[nextHop()]!</label>
			<label kind="assignment" x="595" y="-25">comms++</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="25" y="-25">transmit[ID]?</label>
		</transition>
	</template>
	<template>
		<name>RingNodeAsync</name>
		<parameter>const UID ID</parameter>
		<declaration>clock t;

int cost; // the cost to move to a target position

int possiblePos[N];

UID nextHop() {
  return (ID + 1) % N;
}

// Distance between two points
/*
int Distance(pos p1, pos p2)
{
  double a = pow((p2.x - p1.x), 2);
  double b = pow((p2.y - p1.y), 2);
  double c = pow((p2.z - p1.z), 2);

  double dist = sqrt(a + b + c);
  int distInt = fint(dist);
  return  distInt;
}
*/

int minInt(int n1, int n2)
{
  if (n1 &lt; n2)
  {
    return n1;
  }
  {
    return n2;
  }  
}

int maxInt(int n1, int n2)
{
  if (n1 &gt; n2)
  {
    return n1;
  }
  {
    return n2;
  }
}

int Distance(int p1, int p2)
{
  int minP = minInt(p1, p2);
  int maxP = maxInt(p1, p2);

  int distance1 = maxP - minP;
  int distance2 = (radius - maxP) + minP;

  if ((distance1 &lt; distance2) &amp;&amp; (distance1 &gt;= 0))
  {
    return distance1;
  }
  else
  {
    return distance2;
  }
}


int minIndex()
{
  int minVal = 999;
  int index;
  
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (possiblePos[i] &lt; minVal  &amp;&amp; possiblePos[i] != -1)
    {
      index = i;
      minVal = possiblePos[i];
    }
  }
  return index;
}

// check if node with id has already chosen a position
bool isInPlan(int id)
{
  int i;
  for (i=0; i&lt;N; i++)
  {
    if (id == chosenPos[i]) { return true; }
  }
  return false;
}

void CalculatePositions()
{
  int i;

  // Calculate cost to all target positions
  for (i=0; i&lt;N; i++)
  {
    if (chosenPos[i] == -1)
    {
      possiblePos[i] = Distance(startPositions[ID], targetPositions[i]);
    }
    else
    {
      possiblePos[i] = -1;
    }
  }
}


int BestPosition(int id)
{
  int bestCost = 999;
  int bestPos;
  
  int i;
  for (i=0; i&lt;N; i++)
  {
    int tempCost = Distance(startPositions[id], targetPositions[i]);

    if (tempCost &lt; bestCost)
    {
      bestCost = tempCost;
      bestPos = i;
    }
  }

  return bestPos;
}


void ProcessPlan()
{
  int i;
  int nodesBestPos[N];
  
  for (i=0; i&lt;N; i++)
  {
    if (!isInPlan(i) &amp;&amp; i != ID)
    {
        int bestPosition = BestPosition(i);
    }
    else
    {
      nodesBestPos[i] = -1;
    }
  }

  // Loop over all possible positions (smallest first)
  // Check if other nodes has each position as their best
  // Choose the first available
  for (i=0; i&lt;N; i++)
  {
    if (possiblePos[i] != -1)
    {
      int index = minIndex();
      
      if (nodesBestPos[index] == -1)
      {
        chosenPos[index] = ID;
        cost = Distance(startPositions[i], targetPositions[index]);
      }
      else
      {
        possiblePos[index] = -1;
      }
    }
  }
}</declaration>
		<location id="id7" x="-6460" y="-5746">
			<name x="-6485" y="-5729">Receive</name>
		</location>
		<location id="id8" x="-6256" y="-5746">
			<name x="-6282" y="-5729">Process</name>
			<urgent/>
		</location>
		<location id="id9" x="-5695" y="-5746">
			<name x="-5712" y="-5729">Done</name>
		</location>
		<location id="id10" x="-6358" y="-5814">
			<name x="-6375" y="-5848">Start</name>
			<urgent/>
		</location>
		<location id="id11" x="-5559" y="-5746">
			<committed/>
		</location>
		<location id="id12" x="-6069" y="-5746">
			<committed/>
		</location>
		<location id="id13" x="-5882" y="-5746">
			<name x="-5899" y="-5729">Wait</name>
			<label kind="invariant" x="-5899" y="-5712">t &lt;= 10</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id13"/>
			<target ref="id9"/>
			<label kind="guard" x="-5822" y="-5805">t &gt;= 1</label>
			<label kind="synchronisation" x="-5865" y="-5771">transmit[nextHop()]!</label>
			<label kind="assignment" x="-5839" y="-5788">comms++</label>
			<nail x="-5780" y="-5746"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="assignment" x="-6044" y="-5771">ProcessPlan(), t = 0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id12"/>
			<label kind="assignment" x="-6222" y="-5771">CalculatePositions()</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-5661" y="-5839">complete!</label>
			<nail x="-5559" y="-5814"/>
			<nail x="-5695" y="-5814"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-5670" y="-5771">transmit[ID]?</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-6333" y="-5839">ID == start</label>
			<nail x="-6256" y="-5814"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="guard" x="-6443" y="-5839">ID != start</label>
			<nail x="-6460" y="-5814"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-6401" y="-5771">transmit[ID]?</label>
		</transition>
	</template>
	<template>
		<name>PlanGeneration</name>
		<declaration>/*
void InitConstellationAndPlan()
{
  int i; 
  double PI = 3.14159265358979312;
  double radius = 100.0;

  double radianIncrease = (2 * PI) / N;
  double radian = 0.0;

  //radianIncrease = (2 * PI) / N;

  
  for(i = 0; i &lt; N; i++)
  {    
    int startX = fint(radius * cos(radian));
    int startZ = fint(radius * cos(radian));
   
    int targetX = fint(radius * cos(radian * 1.5));
    int targetZ = fint(radius * cos(radian * 1.5));

    pos newStartPos = {startX, 0, startZ};
    pos newTargetPos = {targetX, 0, targetZ};

    startPositions[i] = newStartPos;
    targetPositions[i] = newTargetPos;

    chosenPos[i] = -1;

    radian = radian + radianIncrease;
  }
}
*/

void InitConstellationAndPlan()
{
  int distanceBetweenNodes = radius / N;
  int nextPosition = 0;
  int i;
  for(i=0; i&lt;N; i++)
  {
    int randomDistance = fint(random(distanceBetweenNodes));
    startPositions[i] = nextPosition;

    targetPositions[i] = nextPosition + randomDistance;

    chosenPos[i] = -1;

    nextPosition += distanceBetweenNodes;
  }
}

bool Destinct(){
  bool result = true;
  int i;
  for (i=0; i&lt;N; i++)
  {
    int count = 0;
    int j;
    for (j=0; j&lt;N; j++)
    {
      if (chosenPos[j] == i) { count++;}
    }
    if (count &gt; 1) { result = false; }
  }
  return result;
}

bool Verify() {
  return Destinct();
}</declaration>
		<location id="id14" x="-204" y="0">
			<committed/>
		</location>
		<location id="id15" x="-68" y="0">
			<name x="-85" y="17">Wait</name>
		</location>
		<location id="id16" x="34" y="0">
			<name x="51" y="-8">Complete</name>
			<committed/>
		</location>
		<location id="id17" x="170" y="68">
			<name x="187" y="59">Wrong</name>
		</location>
		<location id="id18" x="170" y="-68">
			<name x="187" y="-76">Correct</name>
		</location>
		<location id="id19" x="-425" y="0">
			<name x="-435" y="-34">Init</name>
			<committed/>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id19"/>
			<target ref="id14"/>
			<label kind="assignment" x="-399" y="-25">InitConstellationAndPlan()</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="42" y="68">Verify() == false</label>
			<nail x="34" y="68"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="guard" x="42" y="-93">Verify() == true</label>
			<nail x="34" y="-68"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-51" y="-25">complete?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="select" x="-178" y="-42">node : UID</label>
			<label kind="assignment" x="-178" y="-25">start = node</label>
		</transition>
	</template>
	<system>system RingNodeAsync, PlanGeneration;</system>
	<queries>
		<query>
			<formula>***** SYNC QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) RingNodeSync(i).Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : UID) RingNodeSync(i).cost &lt;= 6</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (sum (i: UID) RingNodeSync(i).cost) &lt;= 6 * N</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>***** ASYNC QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) RingNodeAsync(i).Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] forall (i : UID) RingNodeAsync(i).cost &lt;= 6</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (sum (i: UID) RingNodeAsync(i).cost) &lt;= 6 * N</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>***** GENEREL QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGeneration.Correct</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] time &lt;= N</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGeneration.Complete &amp;&amp; time &lt;= N</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGeneration.Complete &amp;&amp; time &lt;= (N - 1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] comms &lt;= N</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGeneration.Complete &amp;&amp; comms &lt;= (N - 1)</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>***** DEBUG QUERIES *****</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) chosenPos[i] == i</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) chosenPos[i] != -1 &amp;&amp; RingNodeSync(i).Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i : UID) chosenPos[i] == -1 &amp;&amp; RingNodeSync(i).Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall (i : UID) chosenPos[i] != -1 &amp;&amp; RingNodeAsync(i).Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; exists (i : UID) chosenPos[i] == -1 &amp;&amp; RingNodeAsync(i).Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; PlanGeneration.Complete</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; PlanGeneration.Wrong</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] !PlanGeneration.Wrong</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; deadlock &amp;&amp; (!PlanGeneration &amp;&amp; !Ring.PlanGeneration)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
